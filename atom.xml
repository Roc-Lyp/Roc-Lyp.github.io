<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Roc&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-21T02:23:58.829Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Roc-Lyp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-scapy模块</title>
    <link href="http://example.com/2021/11/21/python-scapy%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/11/21/python-scapy%E6%A8%A1%E5%9D%97/</id>
    <published>2021-11-21T01:26:39.000Z</published>
    <updated>2021-11-21T02:23:58.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-scapy模块"><a href="#python-scapy模块" class="headerlink" title="python-scapy模块"></a>python-scapy模块</h1><h3 id="0x01实验环境"><a href="#0x01实验环境" class="headerlink" title="0x01实验环境"></a>0x01实验环境</h3><p>windows10</p><p>IP地址：192.168.43.233</p><h3 id="0x02实验步骤"><a href="#0x02实验步骤" class="headerlink" title="0x02实验步骤"></a>0x02实验步骤</h3><h4 id="安装scapy"><a href="#安装scapy" class="headerlink" title="安装scapy"></a>安装scapy</h4><p>windows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scapy</span><br><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><h4 id="运行scapy"><a href="#运行scapy" class="headerlink" title="运行scapy"></a>运行scapy</h4><p>cmd下直接输入scapy运行</p><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120121336137.png" alt="image-20211120121336137"></p><p>查看本机网卡接口名称</p><ol><li>show_interfaces()</li><li>ifaces</li></ol><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120121819986.png" alt="image-20211120121819986"></p><p>因为连接的是手机热点</p><h4 id="查看网卡-amp-路由"><a href="#查看网卡-amp-路由" class="headerlink" title="查看网卡&amp;路由"></a>查看网卡&amp;路由</h4><h5 id="conf命令"><a href="#conf命令" class="headerlink" title="conf命令"></a>conf命令</h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>conf</td><td>显示conf所有配置</td></tr><tr><td>conf.iface</td><td>主网卡</td></tr><tr><td>conf.route</td><td>获取主路由</td></tr><tr><td>conf.commands</td><td>可在交互环境中使用的命令集合</td></tr><tr><td>lsc()</td><td>同conf.commands</td></tr></tbody></table><p>当前主网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.iface</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120125135670.png" alt="image-20211120125135670"></p><p>当前主路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.route</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120125248773.png" alt="image-20211120125248773"></p><p>可在交互环境中使用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.commands()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; conf.commands</span><br><span class="line">IPID_count          : Identify IP id values classes in a list of packets</span><br><span class="line">arpcachepoison      : Poison target&#x27;s cache with (your MAC,victim&#x27;s IP) couple</span><br><span class="line">arping              : Send ARP who-has requests to determine which hosts are up</span><br><span class="line">arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017-002.</span><br><span class="line">bind_layers         : Bind 2 layers on some specific fields&#x27; values.</span><br><span class="line">bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return</span><br><span class="line">chexdump            : Build a per byte hexadecimal representation</span><br><span class="line">computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter</span><br><span class="line">corrupt_bits        : Flip a given percentage or number of bits from a string</span><br><span class="line">corrupt_bytes       : Corrupt a given percentage or number of bytes from a string</span><br><span class="line">defrag              : defrag(plist) -&gt; ([not fragmented], [defragmented],</span><br><span class="line">defragment          : defragment(plist) -&gt; plist defragmented as much as possible</span><br><span class="line">dhcp_request        : Send a DHCP discover request and return the answer</span><br><span class="line">dyndns_add          : Send a DNS add message to a nameserver for &quot;name&quot; to have a new &quot;rdata&quot;</span><br><span class="line">dyndns_del          : Send a DNS delete message to a nameserver for &quot;name&quot;</span><br><span class="line">etherleak           : Exploit Etherleak flaw</span><br><span class="line">explore             : Function used to discover the Scapy layers and protocols.</span><br><span class="line">fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.</span><br><span class="line">fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.</span><br><span class="line">fragleak            : --</span><br><span class="line">fragleak2           : --</span><br><span class="line">fragment            : Fragment a big IP datagram</span><br><span class="line">fuzz                :</span><br><span class="line">getmacbyip          : Return MAC address corresponding to a given IP address</span><br><span class="line">getmacbyip6         : Returns the MAC address corresponding to an IPv6 address</span><br><span class="line">hexdiff             : Show differences between 2 binary strings</span><br><span class="line">hexdump             : Build a tcpdump like hexadecimal view</span><br><span class="line">hexedit             : Run hexedit on a list of packets, then return the edited packets.</span><br><span class="line">hexstr              : Build a fancy tcpdump like hex from bytes.</span><br><span class="line">import_hexcap       : Imports a tcpdump like hexadecimal view</span><br><span class="line">is_promisc          : Try to guess if target is in Promisc mode. The target is provided by its ip.</span><br><span class="line">linehexdump         : Build an equivalent view of hexdump() on a single line</span><br><span class="line">ls                  : List  available layers, or infos on a given layer class or name.</span><br><span class="line">neighsol            : Sends and receive an ICMPv6 Neighbor Solicitation message</span><br><span class="line">overlap_frag        : Build overlapping fragments to bypass NIPS</span><br><span class="line">promiscping         : Send ARP who-has requests to determine which hosts are in promiscuous mode</span><br><span class="line">rdpcap              : Read a pcap or pcapng file and return a packet list</span><br><span class="line">report_ports        : portscan a target and output a LaTeX table</span><br><span class="line">restart             : Restarts scapy</span><br><span class="line">send                : Send packets at layer 3</span><br><span class="line">sendp               : Send packets at layer 2</span><br><span class="line">sendpfast           : Send packets at layer 2 using tcpreplay for performance</span><br><span class="line">sniff               :</span><br><span class="line">split_layers        : Split 2 layers previously bound.</span><br><span class="line">sr                  : Send and receive packets at layer 3</span><br><span class="line">sr1                 : Send packets at layer 3 and return only the first answer</span><br><span class="line">sr1flood            : Flood and receive packets at layer 3 and return only the first answer</span><br><span class="line">srbt                : send and receive using a bluetooth socket</span><br><span class="line">srbt1               : send and receive 1 packet using a bluetooth socket</span><br><span class="line">srflood             : Flood and receive packets at layer 3</span><br><span class="line">srloop              : Send a packet at layer 3 in loop and print the answer each time</span><br><span class="line">srp                 : Send and receive packets at layer 2</span><br><span class="line">srp1                : Send and receive packets at layer 2 and return only the first answer</span><br><span class="line">srp1flood           : Flood and receive packets at layer 2 and return only the first answer</span><br><span class="line">srpflood            : Flood and receive packets at layer 2</span><br><span class="line">srploop             : Send a packet at layer 2 in loop and print the answer each time</span><br><span class="line">tcpdump             : Run tcpdump or tshark on a list of packets.</span><br><span class="line">tdecode             :</span><br><span class="line">traceroute          : Instant TCP traceroute</span><br><span class="line">traceroute6         : Instant TCP traceroute using IPv6</span><br><span class="line">traceroute_map      : Util function to call traceroute on multiple targets, then</span><br><span class="line">tshark              : Sniff packets and print them calling pkt.summary().</span><br><span class="line">wireshark           :</span><br><span class="line">wrpcap              : Write a list of packets to a pcap file</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>get_windows_if_list()</td><td>获取所有网卡</td></tr><tr><td>IFACES / ifaces</td><td>get_windows_if_list() 的全局变量</td></tr><tr><td>IFACES.reload() / ifaces.reload()</td><td>网卡发生变化时，刷新IFACES</td></tr></tbody></table><h5 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>read_routes()</td><td>查看IPv4路由</td></tr><tr><td>Route()</td><td>对read_routes()的封装</td></tr><tr><td>conf.route</td><td>Route的全局对象</td></tr><tr><td>conf.route.route(dst=“<a href="http://www.baidu.com”/">www.baidu.com”</a>)</td><td>获取百度的路由，如果dst=None的化返回默认路由</td></tr><tr><td>conf.route.resync()</td><td>如果网络发生变化，刷新conf.route</td></tr></tbody></table><h5 id="查看默认网卡"><a href="#查看默认网卡" class="headerlink" title="查看默认网卡"></a>查看默认网卡</h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>conf.route.resync()</td><td>刷新路由</td></tr><tr><td>conf.iface</td><td>conf.iface = conf.route.route(‘0.0.0.0’)[0] ，默认路由对应的网卡</td></tr></tbody></table><p>更加详细内容请<a href="https://blog.csdn.net/austin1000/article/details/100042405?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.no_search_link">参考文章</a></p><h4 id="嗅探流量包"><a href="#嗅探流量包" class="headerlink" title="嗅探流量包"></a>嗅探流量包</h4><h5 id="sniff函数"><a href="#sniff函数" class="headerlink" title="sniff函数"></a>sniff函数</h5><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120122406607.png" alt="image-20211120122406607"></p><p>sniff函数进行抓包，放入一个列表中，数量为10</p><p>其中8个TCP包，2个其他包</p><ol><li>查看包的详细信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkts[0]</span><br><span class="line">pkts[0].show()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120122814954.png" alt="image-20211120122814954"></p><ul><li>Ether是数据层，dst,stc为目标MAC和源MAC</li><li>IP为网络层的数据,可以得到使用的协议,源IP地址目标IP地址,TTL的值等.</li><li>UDP为运输层数据,可以得到源端口目的端口等信息.</li><li>Raw为应用层信息,其中含有要发送的数据</li></ul><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120123417402.png" alt="image-20211120123417402"></p><ol start="2"><li>查看包的摘要信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkts.show()</span><br><span class="line">pkts.summary()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120123530181.png" alt="image-20211120123530181"></p><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120123621229.png" alt="image-20211120123621229"></p><h6 id="sniff的参数"><a href="#sniff的参数" class="headerlink" title="sniff的参数"></a>sniff的参数</h6><ul><li>iface,表示使用的网卡接口，如果没有指定则会在所有的interface上进行嗅探</li><li>count,嗅探包的个数</li><li>filter,过滤条件</li><li>prn,回调函数，与lambda</li><li>sprint(),控制输入信息</li></ul><p>一直抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkts = sniff(prn = lambda x:x.sprintf(&quot;&#123;IP:%IP.src% -&gt; %IP.dst%\n&#125;&#123;Raw:%Raw.load%\n&#125;&quot;))</span><br></pre></td></tr></table></figure><p>输出抓到的所有包的源IP和目的IP，以及数据</p><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120141609757.png" alt="image-20211120141609757"></p><h5 id="filter过滤包"><a href="#filter过滤包" class="headerlink" title="filter过滤包"></a>filter过滤包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkts = sniff(filter = &#x27;tcp and (port 80 or port 443)&#x27;,prn = lambda x: x.sprintf(&#x27;%IP.src%:%TCP.sport% -&gt; %IP.dst%:%TCP.dport%&#x27;) ,count = 10)</span><br></pre></td></tr></table></figure><p>过滤,tcp并且端口为80或者443的数据包</p><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120143049566.png" alt="image-20211120143049566"></p><h4 id="写入与读取"><a href="#写入与读取" class="headerlink" title="写入与读取"></a>写入与读取</h4><p>使用wrpcap和rdpcap对嗅探到的数据进行保存和读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#写入wrpcap(&#x27;文件名.pcap&#x27;,pkts)#读取read_pkts = rdpcap(&#x27;文件名.pcap&#x27;)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120145018277.png" alt="image-20211120145018277"></p><p>默认保存在C:\Windows\System32下</p><p><img src="C:\Users\Roc\AppData\Roaming\Typora\typora-user-images\image-20211120145240650.png" alt="image-20211120145240650"></p><h4 id="发送-amp-接收"><a href="#发送-amp-接收" class="headerlink" title="发送&amp;接收"></a>发送&amp;接收</h4><h5 id="send-amp-sendp"><a href="#send-amp-sendp" class="headerlink" title="send()&amp;sendp()"></a>send()&amp;sendp()</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendp（pkt,iface=&quot;eth0&quot;,loop=1,inter=1 ）  pkt    构建包的变量iface=&quot;eth0&quot; 选择网卡为eth0loop=1       循环发送inter=1      每隔1秒发送 timeout=1    超时1秒就丢弃，实际时间看程序处理能力而定 </span><br></pre></td></tr></table></figure><p>send()–第3层,给定网卡接口</p><p>sendp()–第2层,自动根据路由表进行路由发送</p><p>都只能发送,不能接受</p><h5 id="sr-amp-srp"><a href="#sr-amp-srp" class="headerlink" title="sr()&amp;srp()"></a>sr()&amp;srp()</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srp(pkt ,timeout=1,verbose=0)pkt  构建包的变量timeout=1 超时1秒就丢弃，实际时间看程序处理能力而定verbose=0 不显示详细信息</span><br></pre></td></tr></table></figure><p>二层：</p><p>   srp()  //发送包， 返回答复和没有答复的包的数量</p><p>   srp1() //发送包， 返回只答复或者发送的包的详细信息| .参数，显示这个参数的返回数据</p><p> 三层：</p><p>   sr(  )  //发送包， 返回答复和没有答复的包的数量</p><p>   sr1( ) //发送包， 返回只答复或者发送的包的详细信息|.参数，显示这个参数的返回数据</p><h4 id="简易python嗅探"><a href="#简易python嗅探" class="headerlink" title="简易python嗅探"></a>简易python嗅探</h4><p>以下例子是通过发送arp请求包来查看某一个IP或者是网段的存活情况,但是必须是与主机IP在同一个局域网内.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8from scapy.all import srp, Ether, ARPimport sysIpScan = sys.argv[1]#IpScan = input(&#x27;请输入IP:&#x27;)print(&quot;扫描中，请稍候...&quot;)ans,unans = srp(Ether(dst=&quot;FF:FF:FF:FF:FF:FF&quot;)/ARP(pdst=IpScan),timeout=2,verbose=0,iface=&quot;Qualcomm Atheros QCA9377 Wireless Network Adapter&quot;)#verbose 不说明下载的形况#iface根据具体网卡接口改变print(&quot;本次扫描一共扫描到%d台主机：&quot; % len(ans))for send,recv in ans:    print(&quot;%s----%s&quot;%(recv.src,recv.psrc))</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_42785117/article/details/89814095?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.no_search_link">参考文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-scapy模块&quot;&gt;&lt;a href=&quot;#python-scapy模块&quot; class=&quot;headerlink&quot; title=&quot;python-scapy模块&quot;&gt;&lt;/a&gt;python-scapy模块&lt;/h1&gt;&lt;h3 id=&quot;0x01实验环境&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
</feed>
